<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.example.model.User" >
    <id column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="mailbox" property="mailbox" jdbcType="VARCHAR" />
    <result column="good" property="good" jdbcType="INTEGER" />
    <result column="follows" property="follows" jdbcType="INTEGER" />
    <result column="collections" property="collections" jdbcType="INTEGER" />
    <result column="article_counts" property="articleCounts" jdbcType="INTEGER" />
    <result column="fans" property="fans" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="code" property="code" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, name, password, sex, create_date, mailbox, good, follows, collections, article_counts, 
    fans, status, code
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{userId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from user
    where user_id = #{userId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.example.model.User" >
    insert into user (user_id, name, password, 
      sex, create_date, mailbox, 
      good, follows, collections, 
      article_counts, fans, status, 
      code)
    values (#{userId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{sex,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, #{mailbox,jdbcType=VARCHAR}, 
      #{good,jdbcType=INTEGER}, #{follows,jdbcType=INTEGER}, #{collections,jdbcType=INTEGER}, 
      #{articleCounts,jdbcType=INTEGER}, #{fans,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{code,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.model.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="mailbox != null" >
        mailbox,
      </if>
      <if test="good != null" >
        good,
      </if>
      <if test="follows != null" >
        follows,
      </if>
      <if test="collections != null" >
        collections,
      </if>
      <if test="articleCounts != null" >
        article_counts,
      </if>
      <if test="fans != null" >
        fans,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="code != null" >
        code,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="mailbox != null" >
        #{mailbox,jdbcType=VARCHAR},
      </if>
      <if test="good != null" >
        #{good,jdbcType=INTEGER},
      </if>
      <if test="follows != null" >
        #{follows,jdbcType=INTEGER},
      </if>
      <if test="collections != null" >
        #{collections,jdbcType=INTEGER},
      </if>
      <if test="articleCounts != null" >
        #{articleCounts,jdbcType=INTEGER},
      </if>
      <if test="fans != null" >
        #{fans,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        #{code,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.model.User" >
    update user
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="mailbox != null" >
        mailbox = #{mailbox,jdbcType=VARCHAR},
      </if>
      <if test="good != null" >
        good = #{good,jdbcType=INTEGER},
      </if>
      <if test="follows != null" >
        follows = #{follows,jdbcType=INTEGER},
      </if>
      <if test="collections != null" >
        collections = #{collections,jdbcType=INTEGER},
      </if>
      <if test="articleCounts != null" >
        article_counts = #{articleCounts,jdbcType=INTEGER},
      </if>
      <if test="fans != null" >
        fans = #{fans,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        code = #{code,jdbcType=VARCHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.model.User" >
    update user
    set name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      mailbox = #{mailbox,jdbcType=VARCHAR},
      good = #{good,jdbcType=INTEGER},
      follows = #{follows,jdbcType=INTEGER},
      collections = #{collections,jdbcType=INTEGER},
      article_counts = #{articleCounts,jdbcType=INTEGER},
      fans = #{fans,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      code = #{code,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=VARCHAR}
  </update>


</mapper>